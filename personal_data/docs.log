 filtered_logger Module

This module provides functionality for filtering and obfuscating
personal data from log messages.
It includes the filter_datum function,
which can be used to replace specific fields in a log message with a
redaction string, helping to ensure that sensitive information is not
exposed in log outputs.

Functions:
    filter_datum(fields: List[str],
    redaction: str, message: str, separator: str) -> str

Obfuscates specified fields in a log message.


class RedactingFormatter(logging.Formatter):
        Redacting Formatter class
        Inherits from logging.Formatter


 Redacting Formatter class

    Inherits from logging.Formatter

    creates variables for class RedactingFormatter
    REDACTION: A string representing by what the field will be obfuscated.
    FORMAT: A string representing the format of the log message.
    SEPARATOR: A string representing by which character fields
    in the log line are separated.

    functions:
        format(record: logging.LogRecord) -> List[str]
    
 Function format
        Filters values in incoming log records using filter_datum.
        Args:
            record: A logging.LogRecord object.
        Returns:
            The obfuscated log message.
        
 function filter_datum
    Obfuscates specified fields in a log message.

    Args:
        fields: A list of strings representing all fields to obfuscate.
        redaction: A string representing by what the field will be obfuscated.
        message: A string representing the log line.
        separator: A string representing by which character fields
        in the log line are separated.

    Returns:
        The obfuscated log message.
    
 function get_logger
    takes no arguments and returns a logging.Logger object.

    Returns:
        A logging.Logger object.
    
